// @flow
import type { Node } from 'react'
import type { Structure, Context, OptimisticSyntheticDragEvent, OptimisticSyntheticFocusEvent } from './types'

export type Props = {
  names: string[],
  component: Function | string,
  children?: Node,
  forwardRef?: boolean,
  dispatch: Function,
  _reduxForm: Context,
  format?: { (value: any, name: string): any },
  parse?: { (value: any, name: string): any },
  props?: Object,

  _fields: {
    [string]: {
      // same as Props in createFieldProps.js (except without single-field-only props, e.g.
      // validate, warn, parse, format, normalize, etc.
      asyncError: any,
      asyncValidating: boolean,
      onBlur: { (event: OptimisticSyntheticFocusEvent, newValue: ?any, previousValue: ?any): void },
      onChange: { (event: SyntheticInputEvent<>, newValue: ?any, previousValue: ?any): void },
      onDrop: { (event: OptimisticSyntheticDragEvent, newValue: ?any, previousValue: ?any): void },
      onDragStart: { (event: OptimisticSyntheticDragEvent): void },
      onFocus: { (event: OptimisticSyntheticFocusEvent): void },
      dirty: boolean,
      dispatch: { (action: any): void },
      form: string,
      initial: any,
      pristine: boolean,
      state: any,
      submitError?: string,
      submitFailed: boolean,
      submitting: boolean,
      syncError?: any,
      syncWarning?: any,
      value: any,
      _value: any
    }
  }
}
